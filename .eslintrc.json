{
  "root": true,
  "env": {
    "node": true,
    "jest": false
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "tsconfig.json"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "rules": {
    "@typescript-eslint/adjacent-overload-signatures": "error",
    "@typescript-eslint/array-type": ["error", { "default": "array-simple" }],
    "@typescript-eslint/await-thenable": "error",
    "@typescript-eslint/ban-types": [
      "error",
      {
        "types": {
          "Object": { "message": "Avoid using the `Object` type. Did you mean `object`?" },
          "Function": { "message": "Avoid using the `Function` type. Prefer a specific function type, like `() => void`." },
          "Boolean": { "message": "Avoid using the `Boolean` type. Did you mean `boolean`?" },
          "Number": { "message": "Avoid using the `Number` type. Did you mean `number`?" },
          "String": { "message": "Avoid using the `String` type. Did you mean `string`?" },
          "Symbol": { "message": "Avoid using the `Symbol` type. Did you mean `symbol`?" }
        }
      }
    ],
    "@typescript-eslint/brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    "@typescript-eslint/comma-dangle": ["error", { "arrays": "always-multiline", "objects": "always-multiline", "imports": "always-multiline", "exports": "always-multiline", "functions": "always-multiline", "enums": "always-multiline" }],
    "@typescript-eslint/comma-spacing": "error",
    "@typescript-eslint/consistent-type-assertions": "error",
    "@typescript-eslint/consistent-type-definitions": "error",
    "@typescript-eslint/dot-notation": "error",
    "@typescript-eslint/explicit-member-accessibility": ["error", { "accessibility": "no-public" }],
    "@typescript-eslint/func-call-spacing": "error",
    "@typescript-eslint/indent": ["error", 2],
    "@typescript-eslint/keyword-spacing": "error",
    "@typescript-eslint/member-ordering": "error",
    "@typescript-eslint/no-duplicate-imports": "error",
    "@typescript-eslint/no-empty-interface": "error",
    "@typescript-eslint/no-extraneous-class": "error",
    "@typescript-eslint/no-floating-promises": "error",
    "@typescript-eslint/no-for-in-array": "error",
    "@typescript-eslint/no-namespace": "error",
    "@typescript-eslint/no-non-null-assertion": "error",
    "@typescript-eslint/no-require-imports": "error",
    "@typescript-eslint/no-shadow": ["error", { "hoist": "all" }],
    "@typescript-eslint/no-this-alias": "error",
    "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
    "@typescript-eslint/no-unnecessary-qualifier": "error",
    "@typescript-eslint/no-unused-expressions": "error",
    "@typescript-eslint/no-unused-vars": ["error", { "varsIgnorePattern": "^_", "args": "none" }],
    "@typescript-eslint/prefer-for-of": "error",
    "@typescript-eslint/prefer-readonly": "error",
    "@typescript-eslint/quotes": ["error", "backtick", { "avoidEscape": true, "allowTemplateLiterals": true }],
    "@typescript-eslint/semi": ["error", "always"],
    "@typescript-eslint/triple-slash-reference": "error",
    "@typescript-eslint/type-annotation-spacing": "error",
    "@typescript-eslint/unbound-method": "error",
    "@typescript-eslint/unified-signatures": "error",
    "arrow-body-style": "error",
    "arrow-parens": ["error", "as-needed"],
    "constructor-super": "error",
    "curly": ["error", "multi-line"],
    "eol-last": ["error", "always"],
    "eqeqeq": ["error", "smart"],
    "guard-for-in": "error",
    "no-bitwise": "error",
    "no-cond-assign": "error",
    "no-console": "error",
    "no-duplicate-case": "error",
    "no-fallthrough": "error",
    "no-mixed-operators": ["error", { "groups": [["&&", "||", "?:"]] }],
    "no-return-await": "error",
    "no-sequences": "error",
    "no-sparse-arrays": "error",
    "no-trailing-spaces": "error",
    "no-undef-init": "error",
    "no-unneeded-ternary": "error",
    "no-unsafe-finally": "error",
    "no-var": "error",
    "object-curly-spacing": ["error", "always"],
    "one-var": ["error", "never"],
    "prefer-const": "error",
    "prefer-object-spread": "error",
    "prefer-template": "error",
    "space-before-function-paren": ["error", { "anonymous": "always", "named": "never", "asyncArrow": "always" }],
    "use-isnan": "error"
  }
}
